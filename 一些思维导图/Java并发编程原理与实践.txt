===================
Happens-before
1）Happens-before是用来指定两个操作之间的执行顺序。提供跨线程的内存可见性。
2）在Java内存模型中，如果一个操作执行的结果需要对另一个操作可见，那么这两
个操作之间必然存在Happens-before关系
3）Happens-before规则如下：
	程序顺序规则
		单个线程中的每个操作，总是前一个操作happens-before于该线程中任意后续操作
	监视器锁规则
		对于一个锁的解锁，总是happens-before于随后对这个锁的加锁
	volatile变量规则
	传递性
	Start规则
	Join规则


===================
重排序问题
1）什么是重排序
	为提高程序的运行性能，对代码和指令进行重新排序。
2）数据依赖性（as if serial）
3）指令重排序分类
	编译器重排序和处理器重排序
4）为什么要进行指令重排序
5）指令重排序所带来的影响
6）竞争与同步


===================
锁的内存语义
1）锁的释放与获取所建立的Happens-before关系
2）锁的释放和获取的内存语义
	锁除了让临界区互斥执行外，还可以让释放锁的线程向获取同一个锁的线程发送消息


===================
volatile的内存语义
1）volatile读写建立的Happens-before关系
2）volatile读写的内存语义


===================
final域的内存语义
1）写final域的重排序规则
	写final域的重排序规则禁止把final域的写重排序到构造方法以外。
	Java的内存模型禁止把final域的写重排序到构造方法以外。
	编译器会在final域的写之后，在构造方法执行完毕之前，插入一个内存屏障StoreStore，
	保证处理器把final域的写操作在构造方法中执行。
2）读final域的重排序规则
	在一个线程中，初次读对象引用和初次读该对象所包含的final域，Java内存模型禁止处理
	器排序这两个操作。
3）final域的静态类型
4）final域的动态类型
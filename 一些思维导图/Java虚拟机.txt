探究对象的结构
1）header 对象头
	自身运行时的数据
		哈希值 GC分代年龄 锁状态标志 线程持有的锁 偏向线程ID 偏向时间戳
	类型指针
		对象指向类的元数据的指针，并非必需
		数组这种特殊的对象，还会存储数组的长度
2）InstanceData 实例数据
	受虚拟机内存分配策略的限制，如相同长度的类型会分配在一起
	Longs/Doubles  shorts/chars  
3）Padding 对齐填充
	需要对齐填充的原因是：要求对象的起始地址必须是8个字节的整数倍



深入理解对象的访问定位
1）使用句柄
	先从引用类型定位到句柄池，然后通过句柄池来找到对象的真正地址。
2）直接指针
	从引用类型直接指向对象真正的内存区域
如果可以直接使用指针找到为何还需要句柄池？
使用句柄池的好处：
	应用地址在对象变化时是不需要修改的。
使用直接指针的好处：
	速度非常快
Hotspot使用的是直接地址的方式。



垃圾回收的算法：
	标记清除算法
	复制算法
	分代收集算法
	



